version: '3.7'

services:
    api:
        volumes:
            - yarn-cache:/usr/local/share/.cache/yarn
            - node-modules:/opt/app/node_modules
            - .:/opt/app
        environment:
            DB_USER: ${DB_USER:-postgres}
            DB_NAME: ${DB_NAME:-postgres}
            API_PORT: ${API_PORT:-3000}
            DB_PASS: ${DB_PASS:-root}
            DB_HOST: ${DB_HOST:-db}
        build:
            dockerfile: .deploy/api/Dockerfile
            target: ${NODE_ENV:-development}
            context: .
        links:
            - postgres:${DB_HOST:-db}
        ports:
            - 3000:${API_PORT:-3000}
        container_name: gauzy-api
        image: gauzy-api
        restart: always
        depends_on:
            - postgres

    webapp:
        volumes:
            - yarn-cache:/usr/local/share/.cache/yarn
            - node-modules:/opt/app/node_modules
            - .:/opt/app
        environment:
            API_PORT: ${API_PORT:-3000}
            PORT: ${PORT:-4200}
        build:
            dockerfile: .deploy/webapp/Dockerfile
            target: ${NODE_ENV:-development}
            context: .
        container_name: gauzy-webapp
        links:
            - api:${API_HOST:-host}
        ports:
            - 4200:${PORT:-4200}
        image: gauzy-webapp
        restart: always
        depends_on:
            - api

    postgres:
        volumes:
            - postgres-data:/var/lib/postgresql/data
        environment:
            POSTGRES_PASSWORD: ${DB_PASS:-root}
            POSTGRES_USER: ${DB_USER:-postgres}
            POSTGRES_DB: ${DB_NAME:-postgres}
        container_name: gauzy-postgres
        image: postgres:alpine
        restart: always

    #
    # Helpers/Utilities
    #

    nginx:
        volumes:
            - .deploy/nginx/nginx.conf:/etc/nginx/nginx.conf
            - .deploy/nginx/cache/:/etc/nginx/cache
            - .deploy/nginx/log/:/etc/nginx/logs
            - /etc/letsencrypt:/etc/letsencrypt
        container_name: production_nginx
        links:
            - api:${API_HOST:-host}
            - webapp
        image: nginx:latest
        restart: always
        ports:
            - 8080:8080
        depends_on:
            - webapp
            - api

    pgweb:
        environment:
            DATABASE_URL: postgres://${DB_USER:-postgres}:${DB_PASS:-root}@${DB_HOST:-db}:${DB_PORT:-5432}/${DB_NAME:-postgres}?sslmode=disable
            POSTGRES_PASSWORD: ${DB_PASS:-root}
            POSTGRES_USER: ${DB_USER:-postgres}
            POSTGRES_DB: ${DB_NAME:-postgres}
        links:
            - postgres:${DB_HOST:-db}
        image: sosedoff/pgweb
        container_name: pgweb
        restart: always
        ports:
            - 8081:8081
        depends_on:
            - postgres

    franchise:
        environment:
            PGDATABASE: ${DB_NAME:-postgres}
            PGUSER: ${DB_USER:-postgres}
            PGPASSWORD: ${DB_PASS:-root}
            PGPORT: ${DB_PORT:-5432}
            PGHOST: ${DB_HOST:-db}
        links:
            - postgres:${DB_HOST:-db}
        container_name: franchise
        image: binakot/franchise
        restart: always
        ports:
            - 14645:14645
            - 8082:80
        depends_on:
            - postgres

    omnidb:
        links:
            - postgres:${DB_HOST:-db}
        image: taivokasper/omnidb
        container_name: omnidb
        restart: always
        ports:
            - 25482:25482
            - 8083:8080
        depends_on:
            - postgres

    adminer:
        environment:
            ADMINER_DEFAULT_DB_HOST: ${DB_HOST:-db}:${DB_PORT:-5432}
            ADMINER_DEFAULT_DB_PASSWORD: ${DB_PASS:-root}
            ADMINER_DEFAULT_DB_NAME: ${DB_NAME:-postgres}
            ADMINER_DEFAULT_DB_DRIVER: pgsql
        links:
            - postgres:${DB_HOST:-db}
        container_name: adminer
        restart: always
        image: adminer
        depends_on:
            - postgres
        ports:
            - 8084:8080

volumes:
    postgres-data:
    node-modules:
    yarn-cache:
